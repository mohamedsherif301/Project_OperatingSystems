
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Lenovo
 */


public class MainFrame extends javax.swing.JFrame {
    
        DefaultTableModel model ;
        int counterProcess = 0;
         
             

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        SelectedAlgorithm = new javax.swing.JComboBox<>();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        jLabel1.setText("No.Process");

        jButton1.setBackground(new java.awt.Color(51, 51, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jButton2.setText("Generate Table");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process", "BurstTime", "Waiting Time", "Turnaround Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        SelectedAlgorithm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "SJF", "PS", "RR", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(SelectedAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(87, 87, 87)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addComponent(SelectedAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
       
             model = (DefaultTableModel) jTable1.getModel();

        try {
            int processCount = Integer.parseInt(jTextField1.getText()); // افترض أن jTextField1 هو حقل إدخال عدد العمليات
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); // افترض أن jTable1 هو الجدول
            model.setRowCount(0); // مسح أي بيانات سابقة في الجدول
            model.setColumnIdentifiers(new String[]{"Process", "Burst Time", "Waiting Time", "Turnaround Time"}); // إعداد الأعمدة

            for (int i = 1; i <= processCount; i++) {
                model.addRow(new Object[]{"P" + i,0, 0, 0});
            }
            jTextField1.setText("");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number of processes.", "Error", JOptionPane.ERROR_MESSAGE);
        }


        //        Take Busrt Time From Input Alert 
                for (int i=0; i< model.getRowCount(); i++){
                    String BrustTimeInput = JOptionPane.showInputDialog(this, 
                    "Input Busrt Time for process " + (i + 1) + ":", 
                    "Busrt Time Input", 
                    JOptionPane.QUESTION_MESSAGE);

                    if (BrustTimeInput == null || BrustTimeInput.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Busrt Time is required for each process!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }


                      if(model.getRowCount() > counterProcess){
                            String TimeBurst = BrustTimeInput ;

                       model.setValueAt(TimeBurst, counterProcess, 1);
                       counterProcess++;
                if(counterProcess < model.getRowCount() ){

                }
                else {


                           counterProcess = 0;

                           JOptionPane.showMessageDialog(this,"Finshed to give value to all BurstTime" ,"Results",JOptionPane.INFORMATION_MESSAGE);


                }



                }
                else {
        //            message Error 
                        JOptionPane.showMessageDialog(this, "Finshed to Enter Time Brust", "Error", JOptionPane.ERROR_MESSAGE);

                }

                }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    
            int rowCount = model.getRowCount();
            int[] burstTimes = new int[rowCount];
            int[] BackupburstTime = new int[rowCount];
            int[] waitingTimes = new int[rowCount];
            int[] turnAroundTimes = new int[rowCount];

  // الحصول على Burst Times من الجدول
//  Part A
        if(SelectedAlgorithm.getSelectedItem().equals("FCFS")){
              List<Object[]> BuckUPData = new ArrayList<>();

    // **استخراج البيانات من الجدول**
            for (int i = 0; i < rowCount; i++) {
                Object[] row = new Object[4];
                row[0] = model.getValueAt(i, 0); // ID
                row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
                row[2] = 0; // Waiting Time (تعيين مبدئيًا بـ 0)
                row[3] = 0; // Turnaround Time (تعيين مبدئيًا بـ 0)
                BuckUPData.add(row);
            }
            
            for (int i = 0; i < rowCount; i++) {
                try {
              burstTimes[i] = Integer.parseInt(model.getValueAt(i, 1).toString());
          } 
          catch (NumberFormatException e) {
              JOptionPane.showMessageDialog(this, "Please enter valid Burst Times.", "Error", JOptionPane.ERROR_MESSAGE);
              return;
          }
      }

            // حساب Waiting Time
            waitingTimes[0] = 0;
            for (int i = 1; i < rowCount; i++) {
                waitingTimes[i] = waitingTimes[i - 1] + burstTimes[i - 1];
            }

            // حساب Turnaround Time
            for (int i = 0; i < rowCount; i++) {
                turnAroundTimes[i] = waitingTimes[i] + burstTimes[i];
            }

            // تحديث الجدول بالنتائج
            for (int i = 0; i < rowCount; i++) {
                model.setValueAt(waitingTimes[i], i, 2);
                model.setValueAt(turnAroundTimes[i], i, 3);
            }

            // حساب المتوسطات
            double totalWaitingTime = 0, totalTurnAroundTime = 0;
            for (int i = 0; i < rowCount; i++) {
                totalWaitingTime += waitingTimes[i];
                totalTurnAroundTime += turnAroundTimes[i];
            }

            double averageWaitingTime = totalWaitingTime / rowCount;
            double averageTurnAroundTime = totalTurnAroundTime / rowCount;

            // عرض المتوسطات
            JOptionPane.showMessageDialog(this, 
                "In FCFS Average Waiting Time: " + averageWaitingTime + 
                "\nAverage Turnaround Time: " + averageTurnAroundTime, 
                "Results", JOptionPane.INFORMATION_MESSAGE);

  
  }
//        Part B
        else if (SelectedAlgorithm.getSelectedItem().equals("SJF")) {
      
      rowCount = model.getRowCount(); // عدد العمليات في الجدول

    // **إنشاء قائمة لتخزين البيانات**
    List<Object[]> tableData = new ArrayList<>();

    // **استخراج البيانات من الجدول**
    for (int i = 0; i < rowCount; i++) {
        Object[] row = new Object[4];
        row[0] = model.getValueAt(i, 0); // ID
        row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
        row[2] = 0; // Waiting Time (تعيين مبدئيًا بـ 0)
        row[3] = 0; // Turnaround Time (تعيين مبدئيًا بـ 0)
        tableData.add(row);
    }

    // **ترتيب العمليات حسب Burst Time**
    tableData.sort((a, b) -> Integer.compare((int) a[1], (int) b[1]));

    // **حساب Waiting Time و Turnaround Time**
    int currentTime = 0; // الوقت الحالي
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);

        // حساب Waiting Time
        int burstTime = (int) row[1];
        row[2] = currentTime; // Waiting Time = الوقت الحالي قبل بدء العملية

        // حساب Turnaround Time
        row[3] = (int) row[2] + burstTime; // Turnaround Time = Waiting Time + Burst Time

        // تحديث الوقت الحالي
        currentTime += burstTime;
    }

    // **إعادة تعبئة الجدول بالقيم المحسوبة**
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);
        model.setValueAt(row[0], i, 0); // تحديث ID
        model.setValueAt(row[1], i, 1); // تحديث Burst Time
        model.setValueAt(row[2], i, 2); // تحديث Waiting Time
        model.setValueAt(row[3], i, 3); // تحديث Turnaround Time
    }
     double totalWaitingTime = 0, totalTurnAroundTime = 0;
            for (int i = 0; i < rowCount; i++) {
                totalWaitingTime += Integer.parseInt(model.getValueAt(i, 2).toString()) ;
                totalTurnAroundTime += Integer.parseInt( model.getValueAt(i, 3).toString());
            }
    // **عرض رسالة نجاح**
      double averageWaitingTime = totalWaitingTime / rowCount;
            double averageTurnAroundTime = totalTurnAroundTime / rowCount;

            // عرض المتوسطات
            JOptionPane.showMessageDialog(this, 
                "In FJS  Average Waiting Time: " + averageWaitingTime + 
                "\nAverage Turnaround Time: " + averageTurnAroundTime, 
                "Results", JOptionPane.INFORMATION_MESSAGE);
                     
}
//        Part C 
        else if (SelectedAlgorithm.getSelectedItem().equals("PS")) {
    rowCount = model.getRowCount();
    if(model.getColumnCount() == 4){
            model.addColumn("Priority Schaduling"); // إضافة عمود "Quantum Time" في الجدول

    }
  
    
    // **الحصول على Quantum Time لكل عملية**
    for (int i = 0; i < rowCount; i++) {
        String PriorityInput = JOptionPane.showInputDialog(this, 
            "Input Priority Schaduling for process " + (i + 1) + ":", 
            "Priority Schaduling Input", 
            JOptionPane.QUESTION_MESSAGE);

        // التحقق من صحة الإدخال
        if (PriorityInput == null || PriorityInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quantum Time is required for each process!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int PriorityProcess = Integer.parseInt(PriorityInput);
            if (PriorityProcess <= 0) {
                throw new NumberFormatException("Quantum Time must be positive.");
            }
            // تحديث قيمة العمود في الجدول
            model.setValueAt(PriorityProcess, i, model.getColumnCount() - 1);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    // **استخراج بيانات الجدول**
    List<Object[]> tableData = new ArrayList<>();
    for (int i = 0; i < rowCount; i++) {
        Object[] row = new Object[5];
        row[0] = model.getValueAt(i, 0); // ID
        row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
        row[2] = 0; // Waiting Time
        row[3] = 0; // Turnaround Time
        row[4] = Integer.parseInt(model.getValueAt(i, model.getColumnCount() - 1).toString()); // Quantum Time
        tableData.add(row);
    }

    // **ترتيب العمليات حسب Quantum Time**
    tableData.sort((a, b) -> Integer.compare((int) a[4], (int) b[4]));

    // **تنفيذ خوارزمية Round Robin بناءً على Quantum Time لكل عملية**
     // **حساب Waiting Time و Turnaround Time**
    int currentTime = 0; // الوقت الحالي
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);

        // حساب Waiting Time
        int burstTime = (int) row[1];
        row[2] = currentTime; // Waiting Time = الوقت الحالي قبل بدء العملية

        // حساب Turnaround Time
        row[3] = (int) row[2] + burstTime; // Turnaround Time = Waiting Time + Burst Time

        // تحديث الوقت الحالي
        currentTime += burstTime;
    }

    // **إعادة تعبئة الجدول بالقيم المحسوبة**
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);
        model.setValueAt(row[0], i, 0); // تحديث ID
        model.setValueAt(row[1], i, 1); // تحديث Burst Time
        model.setValueAt(row[2], i, 2); // تحديث Waiting Time
        model.setValueAt(row[3], i, 3); // تحديث Turnaround Time
        model.setValueAt(row[4], i, 4); // تحديث Turnaround Time

    }
     double totalWaitingTime = 0, totalTurnAroundTime = 0;
            for (int i = 0; i < rowCount; i++) {
                totalWaitingTime += Integer.parseInt(model.getValueAt(i, 2).toString()) ;
                totalTurnAroundTime += Integer.parseInt( model.getValueAt(i, 3).toString());
            }
    // **عرض رسالة نجاح**
      double averageWaitingTime = totalWaitingTime / rowCount;
            double averageTurnAroundTime = totalTurnAroundTime / rowCount;

            // عرض المتوسطات
            JOptionPane.showMessageDialog(this, 
                "In RR  Average Waiting Time: " + averageWaitingTime + 
                "\nAverage Turnaround Time: " + averageTurnAroundTime, 
                "Results", JOptionPane.INFORMATION_MESSAGE);
                     
   
}
//        Part D 
    else if (SelectedAlgorithm.getSelectedItem().equals("RR")) {
    rowCount = model.getRowCount();
    if(model.getColumnCount() != 5){
            model.addColumn("quantumTime"); // إضافة عمود "Quantum Time" في الجدول
    }
    for(int i=0 ; i< rowCount ;i++){
        int currentTimeBust = Integer.parseInt(model.getValueAt(i, 1).toString()) ;
        BackupburstTime[i] = currentTimeBust;
        
    }
    // **الحصول على Quantum Time مرة واحدة فقط**
    String quantumInput = JOptionPane.showInputDialog(this, 
        "Input Quantum Time for all processes:", 
        "Quantum Time Input", 
        JOptionPane.QUESTION_MESSAGE);

    // التحقق من صحة الإدخال
    if (quantumInput == null || quantumInput.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Quantum Time is required!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int quantumTime;
    try {
        quantumTime = Integer.parseInt(quantumInput);
        if (quantumTime <= 0) {
            throw new NumberFormatException("Quantum Time must be positive.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // **استخراج بيانات الجدول**
    List<Object[]> tableData = new ArrayList<>();
    for (int i = 0; i < rowCount; i++) {
        Object[] row = new Object[4];
        row[0] = model.getValueAt(i, 0); // ID
        row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
        row[2] = 0; // Waiting Time
        row[3] = 0; // Turnaround Time
        tableData.add(row);
    }

    // **تنفيذ خوارزمية Round Robin**
    int currentTime = 0;
    boolean allProcessesComplete;
    do {
        allProcessesComplete = true;

        for (Object[] process : tableData) {
            int remainingTime = (int) process[1]; // based on Burst Time

            if (remainingTime > 0) {
                allProcessesComplete = false;

                if (remainingTime > quantumTime) {
                    currentTime += quantumTime;
                    process[1] = remainingTime - quantumTime; // تحديث Remaining Time
                } else {
                    currentTime += remainingTime;
                    process[1] = 0; // العملية انتهت
                    process[3] = currentTime; // Turnaround Time
                    process[2] = (int) process[3] - ((int) process[1] + remainingTime); // Waiting Time
                }
            }
        }
    } while (!allProcessesComplete);

    // **إعادة تعبئة الجدول بالقيم المحسوبة**
    for (int i = 0; i < tableData.size(); i++) {
        Object[] process = tableData.get(i);
        model.setValueAt(process[0], i, 0); // ID
        model.setValueAt( BackupburstTime[i], i, 1); // Burst Time
        model.setValueAt((int) process[2], i, 2); // Waiting Time
        model.setValueAt((int) process[3], i, 3); // Turnaround Time
        model.setValueAt(quantumTime, i, 4); // Quantum Time
    }

    // **حساب المتوسطات**
    double totalWaitingTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < rowCount; i++) {
        totalWaitingTime += Integer.parseInt(model.getValueAt(i, 2).toString());
        totalTurnAroundTime += Integer.parseInt(model.getValueAt(i, 3).toString());
    }

    double averageWaitingTime = totalWaitingTime / rowCount;
    double averageTurnAroundTime = totalTurnAroundTime / rowCount;

    // **عرض النتائج**
    JOptionPane.showMessageDialog(this, 
        "Round Robin (RR) with Quantum Time " + quantumTime + ":\n " +
        "Average Waiting Time: " + averageWaitingTime + "\n" +
        "Average Turnaround Time: " + averageTurnAroundTime, 
        "Results", JOptionPane.INFORMATION_MESSAGE);
}



    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> SelectedAlgorithm;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
